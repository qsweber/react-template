name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
      - run: npm install
      - run: npm run test
      - run: npm run build
  infra:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
      - run: npm install
      - uses: pulumi/actions@v4
      - run: cd infrastructure && pulumi login ${{ secrets.PULUMI_CLOUD_URL }} && cd ..
      - run: cd infrastructure && pulumi up --stack react-template --non-interactive --yes --expect-no-changes && cd ..
    env:
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-west-2"
  release_deploy:
    runs-on: ubuntu-latest
    needs: [test, infra]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
      - run: npm install
      - run: npm run build
      - name: get-npm-version
        id: package-version
        run: |
          VERSION=$(node -e "console.log(JSON.parse(fs.readFileSync('package.json')).version.replace(/\.\d+$/, ''))")
          VERSION+=".${{ github.run_number }}"
          echo "package-version=$(echo $VERSION)" >> $GITHUB_OUTPUT
      - run: zip -r build.zip build/*
      - name: create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build.zip"
          name: Release ${{ steps.package-version.outputs.package-version }}
          tag: v${{ steps.package-version.outputs.package-version }}
      - name: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          pip install awscli
          aws s3 sync --acl public-read --delete ./build ${{ secrets.S3_BUCKET }}
          aws configure set preview.cloudfront true
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths '/*'
